{
  "formatVersion": 1,
  "database": {
    "version": 78,
    "identityHash": "774812a6dc51eeb46fc2bf1b5210ca43",
    "entities": [
      {
        "tableName": "AccountEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`userId` TEXT NOT NULL, `username` TEXT, `email` TEXT, `state` TEXT NOT NULL, `sessionId` TEXT, `sessionState` TEXT, PRIMARY KEY(`userId`), FOREIGN KEY(`sessionId`) REFERENCES `SessionEntity`(`sessionId`) ON UPDATE NO ACTION ON DELETE NO ACTION )",
        "fields": [
          {
            "fieldPath": "userId",
            "columnName": "userId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "username",
            "columnName": "username",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "email",
            "columnName": "email",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "state",
            "columnName": "state",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "sessionId",
            "columnName": "sessionId",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "sessionState",
            "columnName": "sessionState",
            "affinity": "TEXT"
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "userId"
          ]
        },
        "indices": [
          {
            "name": "index_AccountEntity_sessionId",
            "unique": false,
            "columnNames": [
              "sessionId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_AccountEntity_sessionId` ON `${TABLE_NAME}` (`sessionId`)"
          },
          {
            "name": "index_AccountEntity_userId",
            "unique": false,
            "columnNames": [
              "userId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_AccountEntity_userId` ON `${TABLE_NAME}` (`userId`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "SessionEntity",
            "onDelete": "NO ACTION",
            "onUpdate": "NO ACTION",
            "columns": [
              "sessionId"
            ],
            "referencedColumns": [
              "sessionId"
            ]
          }
        ]
      },
      {
        "tableName": "AccountMetadataEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`userId` TEXT NOT NULL, `product` TEXT NOT NULL, `primaryAtUtc` INTEGER NOT NULL, `migrations` TEXT, PRIMARY KEY(`userId`, `product`), FOREIGN KEY(`userId`) REFERENCES `AccountEntity`(`userId`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "userId",
            "columnName": "userId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "product",
            "columnName": "product",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "primaryAtUtc",
            "columnName": "primaryAtUtc",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "migrations",
            "columnName": "migrations",
            "affinity": "TEXT"
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "userId",
            "product"
          ]
        },
        "indices": [
          {
            "name": "index_AccountMetadataEntity_userId",
            "unique": false,
            "columnNames": [
              "userId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_AccountMetadataEntity_userId` ON `${TABLE_NAME}` (`userId`)"
          },
          {
            "name": "index_AccountMetadataEntity_product",
            "unique": false,
            "columnNames": [
              "product"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_AccountMetadataEntity_product` ON `${TABLE_NAME}` (`product`)"
          },
          {
            "name": "index_AccountMetadataEntity_primaryAtUtc",
            "unique": false,
            "columnNames": [
              "primaryAtUtc"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_AccountMetadataEntity_primaryAtUtc` ON `${TABLE_NAME}` (`primaryAtUtc`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "AccountEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "userId"
            ],
            "referencedColumns": [
              "userId"
            ]
          }
        ]
      },
      {
        "tableName": "AddressChangeEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`userId` TEXT NOT NULL, `changeId` TEXT NOT NULL, `counterEncrypted` TEXT NOT NULL, `emailEncrypted` TEXT NOT NULL, `epochIdEncrypted` TEXT NOT NULL, `creationTimestampEncrypted` TEXT NOT NULL, `publicKeysEncrypted` TEXT NOT NULL, `isObsolete` TEXT NOT NULL, PRIMARY KEY(`userId`, `changeId`), FOREIGN KEY(`userId`) REFERENCES `UserEntity`(`userId`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "userId",
            "columnName": "userId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "changeId",
            "columnName": "changeId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "counterEncrypted",
            "columnName": "counterEncrypted",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "emailEncrypted",
            "columnName": "emailEncrypted",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "epochIdEncrypted",
            "columnName": "epochIdEncrypted",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "creationTimestampEncrypted",
            "columnName": "creationTimestampEncrypted",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "publicKeysEncrypted",
            "columnName": "publicKeysEncrypted",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "isObsolete",
            "columnName": "isObsolete",
            "affinity": "TEXT",
            "notNull": true
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "userId",
            "changeId"
          ]
        },
        "foreignKeys": [
          {
            "table": "UserEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "userId"
            ],
            "referencedColumns": [
              "userId"
            ]
          }
        ]
      },
      {
        "tableName": "AddressEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`userId` TEXT NOT NULL, `addressId` TEXT NOT NULL, `email` TEXT NOT NULL, `displayName` TEXT, `signature` TEXT, `domainId` TEXT, `canSend` INTEGER NOT NULL, `canReceive` INTEGER NOT NULL, `enabled` INTEGER NOT NULL, `type` INTEGER, `order` INTEGER NOT NULL, `signedKeyList_data` TEXT, `signedKeyList_signature` TEXT, `signedKeyList_minEpochId` INTEGER, `signedKeyList_maxEpochId` INTEGER, `signedKeyList_expectedMinEpochId` INTEGER, PRIMARY KEY(`addressId`), FOREIGN KEY(`userId`) REFERENCES `UserEntity`(`userId`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "userId",
            "columnName": "userId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "addressId",
            "columnName": "addressId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "email",
            "columnName": "email",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "displayName",
            "columnName": "displayName",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "signature",
            "columnName": "signature",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "domainId",
            "columnName": "domainId",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "canSend",
            "columnName": "canSend",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "canReceive",
            "columnName": "canReceive",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "enabled",
            "columnName": "enabled",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "type",
            "columnName": "type",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "order",
            "columnName": "order",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "signedKeyList.data",
            "columnName": "signedKeyList_data",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "signedKeyList.signature",
            "columnName": "signedKeyList_signature",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "signedKeyList.minEpochId",
            "columnName": "signedKeyList_minEpochId",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "signedKeyList.maxEpochId",
            "columnName": "signedKeyList_maxEpochId",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "signedKeyList.expectedMinEpochId",
            "columnName": "signedKeyList_expectedMinEpochId",
            "affinity": "INTEGER"
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "addressId"
          ]
        },
        "indices": [
          {
            "name": "index_AddressEntity_addressId",
            "unique": false,
            "columnNames": [
              "addressId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_AddressEntity_addressId` ON `${TABLE_NAME}` (`addressId`)"
          },
          {
            "name": "index_AddressEntity_userId",
            "unique": false,
            "columnNames": [
              "userId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_AddressEntity_userId` ON `${TABLE_NAME}` (`userId`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "UserEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "userId"
            ],
            "referencedColumns": [
              "userId"
            ]
          }
        ]
      },
      {
        "tableName": "AddressKeyEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`addressId` TEXT NOT NULL, `keyId` TEXT NOT NULL, `version` INTEGER NOT NULL, `privateKey` TEXT NOT NULL, `isPrimary` INTEGER NOT NULL, `isUnlockable` INTEGER NOT NULL, `flags` INTEGER NOT NULL, `passphrase` BLOB, `token` TEXT, `signature` TEXT, `fingerprint` TEXT, `fingerprints` TEXT, `activation` TEXT, `active` INTEGER NOT NULL, PRIMARY KEY(`keyId`), FOREIGN KEY(`addressId`) REFERENCES `AddressEntity`(`addressId`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "addressId",
            "columnName": "addressId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "keyId",
            "columnName": "keyId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "version",
            "columnName": "version",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "privateKey",
            "columnName": "privateKey",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "isPrimary",
            "columnName": "isPrimary",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "isUnlockable",
            "columnName": "isUnlockable",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "flags",
            "columnName": "flags",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "passphrase",
            "columnName": "passphrase",
            "affinity": "BLOB"
          },
          {
            "fieldPath": "token",
            "columnName": "token",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "signature",
            "columnName": "signature",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "fingerprint",
            "columnName": "fingerprint",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "fingerprints",
            "columnName": "fingerprints",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "activation",
            "columnName": "activation",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "active",
            "columnName": "active",
            "affinity": "INTEGER",
            "notNull": true
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "keyId"
          ]
        },
        "indices": [
          {
            "name": "index_AddressKeyEntity_addressId",
            "unique": false,
            "columnNames": [
              "addressId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_AddressKeyEntity_addressId` ON `${TABLE_NAME}` (`addressId`)"
          },
          {
            "name": "index_AddressKeyEntity_keyId",
            "unique": false,
            "columnNames": [
              "keyId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_AddressKeyEntity_keyId` ON `${TABLE_NAME}` (`keyId`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "AddressEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "addressId"
            ],
            "referencedColumns": [
              "addressId"
            ]
          }
        ]
      },
      {
        "tableName": "ChallengeFrameEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`challengeFrame` TEXT NOT NULL, `flow` TEXT NOT NULL, `focusTime` TEXT NOT NULL, `clicks` INTEGER NOT NULL, `copy` TEXT NOT NULL, `paste` TEXT NOT NULL, `keys` TEXT NOT NULL, PRIMARY KEY(`challengeFrame`))",
        "fields": [
          {
            "fieldPath": "challengeFrame",
            "columnName": "challengeFrame",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "flow",
            "columnName": "flow",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "focusTime",
            "columnName": "focusTime",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "clicks",
            "columnName": "clicks",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "copy",
            "columnName": "copy",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "paste",
            "columnName": "paste",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "keys",
            "columnName": "keys",
            "affinity": "TEXT",
            "notNull": true
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "challengeFrame"
          ]
        }
      },
      {
        "tableName": "EventMetadataEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`userId` TEXT NOT NULL, `config` TEXT NOT NULL, `eventId` TEXT, `nextEventId` TEXT, `refresh` TEXT, `more` INTEGER, `retry` INTEGER NOT NULL, `state` TEXT NOT NULL, `createdAt` INTEGER NOT NULL, `updatedAt` INTEGER, `fetchedAt` INTEGER, PRIMARY KEY(`userId`, `config`), FOREIGN KEY(`userId`) REFERENCES `UserEntity`(`userId`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "userId",
            "columnName": "userId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "config",
            "columnName": "config",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "eventId",
            "columnName": "eventId",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "nextEventId",
            "columnName": "nextEventId",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "refresh",
            "columnName": "refresh",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "more",
            "columnName": "more",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "retry",
            "columnName": "retry",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "state",
            "columnName": "state",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "createdAt",
            "columnName": "createdAt",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "updatedAt",
            "columnName": "updatedAt",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "fetchedAt",
            "columnName": "fetchedAt",
            "affinity": "INTEGER"
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "userId",
            "config"
          ]
        },
        "indices": [
          {
            "name": "index_EventMetadataEntity_userId",
            "unique": false,
            "columnNames": [
              "userId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_EventMetadataEntity_userId` ON `${TABLE_NAME}` (`userId`)"
          },
          {
            "name": "index_EventMetadataEntity_config",
            "unique": false,
            "columnNames": [
              "config"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_EventMetadataEntity_config` ON `${TABLE_NAME}` (`config`)"
          },
          {
            "name": "index_EventMetadataEntity_createdAt",
            "unique": false,
            "columnNames": [
              "createdAt"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_EventMetadataEntity_createdAt` ON `${TABLE_NAME}` (`createdAt`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "UserEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "userId"
            ],
            "referencedColumns": [
              "userId"
            ]
          }
        ]
      },
      {
        "tableName": "FeatureFlagEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`userId` TEXT NOT NULL, `featureId` TEXT NOT NULL, `scope` TEXT NOT NULL, `defaultValue` INTEGER NOT NULL, `value` INTEGER NOT NULL, `variantName` TEXT, `payloadType` TEXT, `payloadValue` TEXT, PRIMARY KEY(`userId`, `featureId`))",
        "fields": [
          {
            "fieldPath": "userId",
            "columnName": "userId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "featureId",
            "columnName": "featureId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "scope",
            "columnName": "scope",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "defaultValue",
            "columnName": "defaultValue",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "value",
            "columnName": "value",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "variantName",
            "columnName": "variantName",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "payloadType",
            "columnName": "payloadType",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "payloadValue",
            "columnName": "payloadValue",
            "affinity": "TEXT"
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "userId",
            "featureId"
          ]
        },
        "indices": [
          {
            "name": "index_FeatureFlagEntity_userId",
            "unique": false,
            "columnNames": [
              "userId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_FeatureFlagEntity_userId` ON `${TABLE_NAME}` (`userId`)"
          },
          {
            "name": "index_FeatureFlagEntity_featureId",
            "unique": false,
            "columnNames": [
              "featureId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_FeatureFlagEntity_featureId` ON `${TABLE_NAME}` (`featureId`)"
          }
        ]
      },
      {
        "tableName": "GooglePurchaseEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`googlePurchaseToken` TEXT NOT NULL, `paymentToken` TEXT NOT NULL, PRIMARY KEY(`googlePurchaseToken`))",
        "fields": [
          {
            "fieldPath": "googlePurchaseToken",
            "columnName": "googlePurchaseToken",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "paymentToken",
            "columnName": "paymentToken",
            "affinity": "TEXT",
            "notNull": true
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "googlePurchaseToken"
          ]
        },
        "indices": [
          {
            "name": "index_GooglePurchaseEntity_paymentToken",
            "unique": true,
            "columnNames": [
              "paymentToken"
            ],
            "orders": [],
            "createSql": "CREATE UNIQUE INDEX IF NOT EXISTS `index_GooglePurchaseEntity_paymentToken` ON `${TABLE_NAME}` (`paymentToken`)"
          }
        ]
      },
      {
        "tableName": "PurchaseEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`sessionId` TEXT NOT NULL, `planName` TEXT NOT NULL, `planCycle` INTEGER NOT NULL, `purchaseState` TEXT NOT NULL, `purchaseFailure` TEXT, `paymentProvider` TEXT NOT NULL, `paymentOrderId` TEXT, `paymentToken` TEXT, `paymentCurrency` TEXT NOT NULL, `paymentAmount` INTEGER NOT NULL, PRIMARY KEY(`planName`), FOREIGN KEY(`sessionId`) REFERENCES `SessionEntity`(`sessionId`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "sessionId",
            "columnName": "sessionId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "planName",
            "columnName": "planName",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "planCycle",
            "columnName": "planCycle",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "purchaseState",
            "columnName": "purchaseState",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "purchaseFailure",
            "columnName": "purchaseFailure",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "paymentProvider",
            "columnName": "paymentProvider",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "paymentOrderId",
            "columnName": "paymentOrderId",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "paymentToken",
            "columnName": "paymentToken",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "paymentCurrency",
            "columnName": "paymentCurrency",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "paymentAmount",
            "columnName": "paymentAmount",
            "affinity": "INTEGER",
            "notNull": true
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "planName"
          ]
        },
        "indices": [
          {
            "name": "index_PurchaseEntity_planName",
            "unique": false,
            "columnNames": [
              "planName"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_PurchaseEntity_planName` ON `${TABLE_NAME}` (`planName`)"
          },
          {
            "name": "index_PurchaseEntity_sessionId",
            "unique": false,
            "columnNames": [
              "sessionId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_PurchaseEntity_sessionId` ON `${TABLE_NAME}` (`sessionId`)"
          },
          {
            "name": "index_PurchaseEntity_purchaseState",
            "unique": false,
            "columnNames": [
              "purchaseState"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_PurchaseEntity_purchaseState` ON `${TABLE_NAME}` (`purchaseState`)"
          },
          {
            "name": "index_PurchaseEntity_paymentProvider",
            "unique": false,
            "columnNames": [
              "paymentProvider"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_PurchaseEntity_paymentProvider` ON `${TABLE_NAME}` (`paymentProvider`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "SessionEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "sessionId"
            ],
            "referencedColumns": [
              "sessionId"
            ]
          }
        ]
      },
      {
        "tableName": "HumanVerificationEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`clientId` TEXT NOT NULL, `clientIdType` TEXT NOT NULL, `verificationMethods` TEXT NOT NULL, `verificationToken` TEXT, `state` TEXT NOT NULL, `humanHeaderTokenType` TEXT, `humanHeaderTokenCode` TEXT, PRIMARY KEY(`clientId`))",
        "fields": [
          {
            "fieldPath": "clientId",
            "columnName": "clientId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "clientIdType",
            "columnName": "clientIdType",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "verificationMethods",
            "columnName": "verificationMethods",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "verificationToken",
            "columnName": "verificationToken",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "state",
            "columnName": "state",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "humanHeaderTokenType",
            "columnName": "humanHeaderTokenType",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "humanHeaderTokenCode",
            "columnName": "humanHeaderTokenCode",
            "affinity": "TEXT"
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "clientId"
          ]
        }
      },
      {
        "tableName": "KeySaltEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`userId` TEXT NOT NULL, `keyId` TEXT NOT NULL, `keySalt` TEXT, PRIMARY KEY(`userId`, `keyId`))",
        "fields": [
          {
            "fieldPath": "userId",
            "columnName": "userId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "keyId",
            "columnName": "keyId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "keySalt",
            "columnName": "keySalt",
            "affinity": "TEXT"
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "userId",
            "keyId"
          ]
        },
        "indices": [
          {
            "name": "index_KeySaltEntity_userId",
            "unique": false,
            "columnNames": [
              "userId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_KeySaltEntity_userId` ON `${TABLE_NAME}` (`userId`)"
          },
          {
            "name": "index_KeySaltEntity_keyId",
            "unique": false,
            "columnNames": [
              "keyId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_KeySaltEntity_keyId` ON `${TABLE_NAME}` (`keyId`)"
          }
        ]
      },
      {
        "tableName": "OrganizationEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`userId` TEXT NOT NULL, `name` TEXT NOT NULL, `displayName` TEXT, `planName` TEXT, `twoFactorGracePeriod` INTEGER, `theme` TEXT, `email` TEXT, `maxDomains` INTEGER, `maxAddresses` INTEGER, `maxSpace` INTEGER, `maxMembers` INTEGER, `maxVPN` INTEGER, `maxCalendars` INTEGER, `features` INTEGER, `flags` INTEGER, `usedDomains` INTEGER, `usedAddresses` INTEGER, `usedSpace` INTEGER, `assignedSpace` INTEGER, `usedMembers` INTEGER, `usedVPN` INTEGER, `usedCalendars` INTEGER, `hasKeys` INTEGER, `toMigrate` INTEGER, PRIMARY KEY(`userId`), FOREIGN KEY(`userId`) REFERENCES `UserEntity`(`userId`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "userId",
            "columnName": "userId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "name",
            "columnName": "name",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "displayName",
            "columnName": "displayName",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "planName",
            "columnName": "planName",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "twoFactorGracePeriod",
            "columnName": "twoFactorGracePeriod",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "theme",
            "columnName": "theme",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "email",
            "columnName": "email",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "maxDomains",
            "columnName": "maxDomains",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "maxAddresses",
            "columnName": "maxAddresses",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "maxSpace",
            "columnName": "maxSpace",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "maxMembers",
            "columnName": "maxMembers",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "maxVPN",
            "columnName": "maxVPN",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "maxCalendars",
            "columnName": "maxCalendars",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "features",
            "columnName": "features",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "flags",
            "columnName": "flags",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "usedDomains",
            "columnName": "usedDomains",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "usedAddresses",
            "columnName": "usedAddresses",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "usedSpace",
            "columnName": "usedSpace",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "assignedSpace",
            "columnName": "assignedSpace",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "usedMembers",
            "columnName": "usedMembers",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "usedVPN",
            "columnName": "usedVPN",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "usedCalendars",
            "columnName": "usedCalendars",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "hasKeys",
            "columnName": "hasKeys",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "toMigrate",
            "columnName": "toMigrate",
            "affinity": "INTEGER"
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "userId"
          ]
        },
        "foreignKeys": [
          {
            "table": "UserEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "userId"
            ],
            "referencedColumns": [
              "userId"
            ]
          }
        ]
      },
      {
        "tableName": "OrganizationKeysEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`userId` TEXT NOT NULL, `publicKey` TEXT NOT NULL, `privateKey` TEXT NOT NULL, PRIMARY KEY(`userId`), FOREIGN KEY(`userId`) REFERENCES `UserEntity`(`userId`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "userId",
            "columnName": "userId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "publicKey",
            "columnName": "publicKey",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "privateKey",
            "columnName": "privateKey",
            "affinity": "TEXT",
            "notNull": true
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "userId"
          ]
        },
        "foreignKeys": [
          {
            "table": "UserEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "userId"
            ],
            "referencedColumns": [
              "userId"
            ]
          }
        ]
      },
      {
        "tableName": "ObservabilityEventEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `name` TEXT NOT NULL, `version` INTEGER NOT NULL, `timestamp` INTEGER NOT NULL, `data` TEXT NOT NULL)",
        "fields": [
          {
            "fieldPath": "id",
            "columnName": "id",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "name",
            "columnName": "name",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "version",
            "columnName": "version",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "timestamp",
            "columnName": "timestamp",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "data",
            "columnName": "data",
            "affinity": "TEXT",
            "notNull": true
          }
        ],
        "primaryKey": {
          "autoGenerate": true,
          "columnNames": [
            "id"
          ]
        }
      },
      {
        "tableName": "PublicAddressEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`email` TEXT NOT NULL, `recipientType` INTEGER NOT NULL, `mimeType` TEXT, `ignoreKT` INTEGER, `signedKeyList_data` TEXT, `signedKeyList_signature` TEXT, `signedKeyList_minEpochId` INTEGER, `signedKeyList_maxEpochId` INTEGER, `signedKeyList_expectedMinEpochId` INTEGER, PRIMARY KEY(`email`))",
        "fields": [
          {
            "fieldPath": "email",
            "columnName": "email",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "recipientType",
            "columnName": "recipientType",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "mimeType",
            "columnName": "mimeType",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "ignoreKT",
            "columnName": "ignoreKT",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "signedKeyListEntity.data",
            "columnName": "signedKeyList_data",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "signedKeyListEntity.signature",
            "columnName": "signedKeyList_signature",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "signedKeyListEntity.minEpochId",
            "columnName": "signedKeyList_minEpochId",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "signedKeyListEntity.maxEpochId",
            "columnName": "signedKeyList_maxEpochId",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "signedKeyListEntity.expectedMinEpochId",
            "columnName": "signedKeyList_expectedMinEpochId",
            "affinity": "INTEGER"
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "email"
          ]
        },
        "indices": [
          {
            "name": "index_PublicAddressEntity_email",
            "unique": false,
            "columnNames": [
              "email"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_PublicAddressEntity_email` ON `${TABLE_NAME}` (`email`)"
          }
        ]
      },
      {
        "tableName": "PublicAddressKeyEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`email` TEXT NOT NULL, `flags` INTEGER NOT NULL, `publicKey` TEXT NOT NULL, `isPrimary` INTEGER NOT NULL, PRIMARY KEY(`email`, `publicKey`), FOREIGN KEY(`email`) REFERENCES `PublicAddressEntity`(`email`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "email",
            "columnName": "email",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "flags",
            "columnName": "flags",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "publicKey",
            "columnName": "publicKey",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "isPrimary",
            "columnName": "isPrimary",
            "affinity": "INTEGER",
            "notNull": true
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "email",
            "publicKey"
          ]
        },
        "indices": [
          {
            "name": "index_PublicAddressKeyEntity_email",
            "unique": false,
            "columnNames": [
              "email"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_PublicAddressKeyEntity_email` ON `${TABLE_NAME}` (`email`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "PublicAddressEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "email"
            ],
            "referencedColumns": [
              "email"
            ]
          }
        ]
      },
      {
        "tableName": "PublicAddressInfoEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`email` TEXT NOT NULL, `warnings` TEXT NOT NULL, `protonMx` INTEGER NOT NULL, `isProton` INTEGER NOT NULL, `addressSignedKeyList_data` TEXT, `addressSignedKeyList_signature` TEXT, `addressSignedKeyList_minEpochId` INTEGER, `addressSignedKeyList_maxEpochId` INTEGER, `addressSignedKeyList_expectedMinEpochId` INTEGER, `catchAllSignedKeyList_data` TEXT, `catchAllSignedKeyList_signature` TEXT, `catchAllSignedKeyList_minEpochId` INTEGER, `catchAllSignedKeyList_maxEpochId` INTEGER, `catchAllSignedKeyList_expectedMinEpochId` INTEGER, PRIMARY KEY(`email`))",
        "fields": [
          {
            "fieldPath": "email",
            "columnName": "email",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "warnings",
            "columnName": "warnings",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "protonMx",
            "columnName": "protonMx",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "isProton",
            "columnName": "isProton",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "addressSignedKeyList.data",
            "columnName": "addressSignedKeyList_data",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "addressSignedKeyList.signature",
            "columnName": "addressSignedKeyList_signature",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "addressSignedKeyList.minEpochId",
            "columnName": "addressSignedKeyList_minEpochId",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "addressSignedKeyList.maxEpochId",
            "columnName": "addressSignedKeyList_maxEpochId",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "addressSignedKeyList.expectedMinEpochId",
            "columnName": "addressSignedKeyList_expectedMinEpochId",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "catchAllSignedKeyList.data",
            "columnName": "catchAllSignedKeyList_data",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "catchAllSignedKeyList.signature",
            "columnName": "catchAllSignedKeyList_signature",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "catchAllSignedKeyList.minEpochId",
            "columnName": "catchAllSignedKeyList_minEpochId",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "catchAllSignedKeyList.maxEpochId",
            "columnName": "catchAllSignedKeyList_maxEpochId",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "catchAllSignedKeyList.expectedMinEpochId",
            "columnName": "catchAllSignedKeyList_expectedMinEpochId",
            "affinity": "INTEGER"
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "email"
          ]
        },
        "indices": [
          {
            "name": "index_PublicAddressInfoEntity_email",
            "unique": false,
            "columnNames": [
              "email"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_PublicAddressInfoEntity_email` ON `${TABLE_NAME}` (`email`)"
          }
        ]
      },
      {
        "tableName": "PublicAddressKeyDataEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`email` TEXT NOT NULL, `emailAddressType` INTEGER NOT NULL, `flags` INTEGER NOT NULL, `publicKey` TEXT NOT NULL, `isPrimary` INTEGER NOT NULL, `source` INTEGER, PRIMARY KEY(`email`, `publicKey`), FOREIGN KEY(`email`) REFERENCES `PublicAddressInfoEntity`(`email`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "email",
            "columnName": "email",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "emailAddressType",
            "columnName": "emailAddressType",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "flags",
            "columnName": "flags",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "publicKey",
            "columnName": "publicKey",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "isPrimary",
            "columnName": "isPrimary",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "source",
            "columnName": "source",
            "affinity": "INTEGER"
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "email",
            "publicKey"
          ]
        },
        "indices": [
          {
            "name": "index_PublicAddressKeyDataEntity_email",
            "unique": false,
            "columnNames": [
              "email"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_PublicAddressKeyDataEntity_email` ON `${TABLE_NAME}` (`email`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "PublicAddressInfoEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "email"
            ],
            "referencedColumns": [
              "email"
            ]
          }
        ]
      },
      {
        "tableName": "SelfAuditResultEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`userId` TEXT NOT NULL, `timestamp` INTEGER NOT NULL, PRIMARY KEY(`userId`), FOREIGN KEY(`userId`) REFERENCES `UserEntity`(`userId`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "userId",
            "columnName": "userId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "timestamp",
            "columnName": "timestamp",
            "affinity": "INTEGER",
            "notNull": true
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "userId"
          ]
        },
        "foreignKeys": [
          {
            "table": "UserEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "userId"
            ],
            "referencedColumns": [
              "userId"
            ]
          }
        ]
      },
      {
        "tableName": "SessionDetailsEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`sessionId` TEXT NOT NULL, `initialEventId` TEXT, `requiredAccountType` TEXT NOT NULL, `secondFactorEnabled` INTEGER NOT NULL, `twoPassModeEnabled` INTEGER NOT NULL, `passphrase` BLOB, `password` TEXT, `fido2AuthenticationOptionsJson` TEXT, PRIMARY KEY(`sessionId`), FOREIGN KEY(`sessionId`) REFERENCES `SessionEntity`(`sessionId`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "sessionId",
            "columnName": "sessionId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "initialEventId",
            "columnName": "initialEventId",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "requiredAccountType",
            "columnName": "requiredAccountType",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "secondFactorEnabled",
            "columnName": "secondFactorEnabled",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "twoPassModeEnabled",
            "columnName": "twoPassModeEnabled",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "passphrase",
            "columnName": "passphrase",
            "affinity": "BLOB"
          },
          {
            "fieldPath": "password",
            "columnName": "password",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "fido2AuthenticationOptionsJson",
            "columnName": "fido2AuthenticationOptionsJson",
            "affinity": "TEXT"
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "sessionId"
          ]
        },
        "indices": [
          {
            "name": "index_SessionDetailsEntity_sessionId",
            "unique": false,
            "columnNames": [
              "sessionId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_SessionDetailsEntity_sessionId` ON `${TABLE_NAME}` (`sessionId`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "SessionEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "sessionId"
            ],
            "referencedColumns": [
              "sessionId"
            ]
          }
        ]
      },
      {
        "tableName": "SessionEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`userId` TEXT, `sessionId` TEXT NOT NULL, `accessToken` TEXT NOT NULL, `refreshToken` TEXT NOT NULL, `scopes` TEXT NOT NULL, `product` TEXT NOT NULL, PRIMARY KEY(`sessionId`), FOREIGN KEY(`userId`) REFERENCES `AccountEntity`(`userId`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "userId",
            "columnName": "userId",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "sessionId",
            "columnName": "sessionId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "accessToken",
            "columnName": "accessToken",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "refreshToken",
            "columnName": "refreshToken",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "scopes",
            "columnName": "scopes",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "product",
            "columnName": "product",
            "affinity": "TEXT",
            "notNull": true
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "sessionId"
          ]
        },
        "indices": [
          {
            "name": "index_SessionEntity_sessionId",
            "unique": false,
            "columnNames": [
              "sessionId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_SessionEntity_sessionId` ON `${TABLE_NAME}` (`sessionId`)"
          },
          {
            "name": "index_SessionEntity_userId",
            "unique": false,
            "columnNames": [
              "userId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_SessionEntity_userId` ON `${TABLE_NAME}` (`userId`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "AccountEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "userId"
            ],
            "referencedColumns": [
              "userId"
            ]
          }
        ]
      },
      {
        "tableName": "UserEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`userId` TEXT NOT NULL, `email` TEXT, `name` TEXT, `displayName` TEXT, `currency` TEXT NOT NULL, `credit` INTEGER NOT NULL, `createdAtUtc` INTEGER NOT NULL, `usedSpace` INTEGER NOT NULL, `maxSpace` INTEGER NOT NULL, `maxUpload` INTEGER NOT NULL, `type` INTEGER, `role` INTEGER, `private` INTEGER NOT NULL, `subscribed` INTEGER NOT NULL, `services` INTEGER NOT NULL, `delinquent` INTEGER, `passphrase` BLOB, `flags` TEXT, `maxBaseSpace` INTEGER, `maxDriveSpace` INTEGER, `usedBaseSpace` INTEGER, `usedDriveSpace` INTEGER, `recovery_state` INTEGER, `recovery_startTime` INTEGER, `recovery_endTime` INTEGER, `recovery_sessionId` TEXT, `recovery_reason` INTEGER, PRIMARY KEY(`userId`), FOREIGN KEY(`userId`) REFERENCES `AccountEntity`(`userId`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "userId",
            "columnName": "userId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "email",
            "columnName": "email",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "name",
            "columnName": "name",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "displayName",
            "columnName": "displayName",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "currency",
            "columnName": "currency",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "credit",
            "columnName": "credit",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "createdAtUtc",
            "columnName": "createdAtUtc",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "usedSpace",
            "columnName": "usedSpace",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "maxSpace",
            "columnName": "maxSpace",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "maxUpload",
            "columnName": "maxUpload",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "type",
            "columnName": "type",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "role",
            "columnName": "role",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "isPrivate",
            "columnName": "private",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "subscribed",
            "columnName": "subscribed",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "services",
            "columnName": "services",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "delinquent",
            "columnName": "delinquent",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "passphrase",
            "columnName": "passphrase",
            "affinity": "BLOB"
          },
          {
            "fieldPath": "flags",
            "columnName": "flags",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "maxBaseSpace",
            "columnName": "maxBaseSpace",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "maxDriveSpace",
            "columnName": "maxDriveSpace",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "usedBaseSpace",
            "columnName": "usedBaseSpace",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "usedDriveSpace",
            "columnName": "usedDriveSpace",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "recovery.state",
            "columnName": "recovery_state",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "recovery.startTime",
            "columnName": "recovery_startTime",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "recovery.endTime",
            "columnName": "recovery_endTime",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "recovery.sessionId",
            "columnName": "recovery_sessionId",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "recovery.reason",
            "columnName": "recovery_reason",
            "affinity": "INTEGER"
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "userId"
          ]
        },
        "indices": [
          {
            "name": "index_UserEntity_userId",
            "unique": false,
            "columnNames": [
              "userId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_UserEntity_userId` ON `${TABLE_NAME}` (`userId`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "AccountEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "userId"
            ],
            "referencedColumns": [
              "userId"
            ]
          }
        ]
      },
      {
        "tableName": "UserKeyEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`userId` TEXT NOT NULL, `keyId` TEXT NOT NULL, `version` INTEGER NOT NULL, `privateKey` TEXT NOT NULL, `isPrimary` INTEGER NOT NULL, `isUnlockable` INTEGER NOT NULL, `fingerprint` TEXT, `activation` TEXT, `active` INTEGER, `recoverySecretHash` TEXT, `recoverySecretSignature` TEXT, PRIMARY KEY(`keyId`), FOREIGN KEY(`userId`) REFERENCES `UserEntity`(`userId`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "userId",
            "columnName": "userId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "keyId",
            "columnName": "keyId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "version",
            "columnName": "version",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "privateKey",
            "columnName": "privateKey",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "isPrimary",
            "columnName": "isPrimary",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "isUnlockable",
            "columnName": "isUnlockable",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "fingerprint",
            "columnName": "fingerprint",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "activation",
            "columnName": "activation",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "active",
            "columnName": "active",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "recoverySecretHash",
            "columnName": "recoverySecretHash",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "recoverySecretSignature",
            "columnName": "recoverySecretSignature",
            "affinity": "TEXT"
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "keyId"
          ]
        },
        "indices": [
          {
            "name": "index_UserKeyEntity_userId",
            "unique": false,
            "columnNames": [
              "userId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_UserKeyEntity_userId` ON `${TABLE_NAME}` (`userId`)"
          },
          {
            "name": "index_UserKeyEntity_keyId",
            "unique": false,
            "columnNames": [
              "keyId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_UserKeyEntity_keyId` ON `${TABLE_NAME}` (`keyId`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "UserEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "userId"
            ],
            "referencedColumns": [
              "userId"
            ]
          }
        ]
      },
      {
        "tableName": "UserSettingsEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`userId` TEXT NOT NULL, `news` INTEGER, `locale` TEXT, `logAuth` INTEGER, `density` INTEGER, `weekStart` INTEGER, `dateFormat` INTEGER, `timeFormat` INTEGER, `earlyAccess` INTEGER, `deviceRecovery` INTEGER, `telemetry` INTEGER, `crashReports` INTEGER, `sessionAccountRecovery` INTEGER, `easyDeviceMigrationOptOut` INTEGER, `email_value` TEXT, `email_status` INTEGER, `email_notify` INTEGER, `email_reset` INTEGER, `phone_value` TEXT, `phone_status` INTEGER, `phone_notify` INTEGER, `phone_reset` INTEGER, `password_mode` INTEGER, `password_expirationTime` INTEGER, `twoFA_enabled` INTEGER, `twoFA_allowed` INTEGER, `twoFA_expirationTime` INTEGER, `twoFA_registeredKeys` TEXT, PRIMARY KEY(`userId`), FOREIGN KEY(`userId`) REFERENCES `UserEntity`(`userId`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "userId",
            "columnName": "userId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "news",
            "columnName": "news",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "locale",
            "columnName": "locale",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "logAuth",
            "columnName": "logAuth",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "density",
            "columnName": "density",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "weekStart",
            "columnName": "weekStart",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "dateFormat",
            "columnName": "dateFormat",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "timeFormat",
            "columnName": "timeFormat",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "earlyAccess",
            "columnName": "earlyAccess",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "deviceRecovery",
            "columnName": "deviceRecovery",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "telemetry",
            "columnName": "telemetry",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "crashReports",
            "columnName": "crashReports",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "sessionAccountRecovery",
            "columnName": "sessionAccountRecovery",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "easyDeviceMigrationOptOut",
            "columnName": "easyDeviceMigrationOptOut",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "email.value",
            "columnName": "email_value",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "email.status",
            "columnName": "email_status",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "email.notify",
            "columnName": "email_notify",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "email.reset",
            "columnName": "email_reset",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "phone.value",
            "columnName": "phone_value",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "phone.status",
            "columnName": "phone_status",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "phone.notify",
            "columnName": "phone_notify",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "phone.reset",
            "columnName": "phone_reset",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "password.mode",
            "columnName": "password_mode",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "password.expirationTime",
            "columnName": "password_expirationTime",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "twoFA.enabled",
            "columnName": "twoFA_enabled",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "twoFA.allowed",
            "columnName": "twoFA_allowed",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "twoFA.expirationTime",
            "columnName": "twoFA_expirationTime",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "twoFA.registeredKeys",
            "columnName": "twoFA_registeredKeys",
            "affinity": "TEXT"
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "userId"
          ]
        },
        "foreignKeys": [
          {
            "table": "UserEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "userId"
            ],
            "referencedColumns": [
              "userId"
            ]
          }
        ]
      },
      {
        "tableName": "NotificationEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`notificationId` TEXT NOT NULL, `userId` TEXT NOT NULL, `time` INTEGER NOT NULL, `type` TEXT NOT NULL, `payload` TEXT NOT NULL, PRIMARY KEY(`userId`, `notificationId`), FOREIGN KEY(`userId`) REFERENCES `UserEntity`(`userId`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "notificationId",
            "columnName": "notificationId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "userId",
            "columnName": "userId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "time",
            "columnName": "time",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "type",
            "columnName": "type",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "payload",
            "columnName": "payload",
            "affinity": "TEXT",
            "notNull": true
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "userId",
            "notificationId"
          ]
        },
        "indices": [
          {
            "name": "index_NotificationEntity_userId",
            "unique": false,
            "columnNames": [
              "userId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_NotificationEntity_userId` ON `${TABLE_NAME}` (`userId`)"
          },
          {
            "name": "index_NotificationEntity_notificationId",
            "unique": false,
            "columnNames": [
              "notificationId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_NotificationEntity_notificationId` ON `${TABLE_NAME}` (`notificationId`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "UserEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "userId"
            ],
            "referencedColumns": [
              "userId"
            ]
          }
        ]
      },
      {
        "tableName": "PushEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`userId` TEXT NOT NULL, `pushId` TEXT NOT NULL, `objectId` TEXT NOT NULL, `type` TEXT NOT NULL, PRIMARY KEY(`userId`, `pushId`), FOREIGN KEY(`userId`) REFERENCES `UserEntity`(`userId`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "userId",
            "columnName": "userId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "pushId",
            "columnName": "pushId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "objectId",
            "columnName": "objectId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "type",
            "columnName": "type",
            "affinity": "TEXT",
            "notNull": true
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "userId",
            "pushId"
          ]
        },
        "indices": [
          {
            "name": "index_PushEntity_userId",
            "unique": false,
            "columnNames": [
              "userId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_PushEntity_userId` ON `${TABLE_NAME}` (`userId`)"
          },
          {
            "name": "index_PushEntity_type",
            "unique": false,
            "columnNames": [
              "type"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_PushEntity_type` ON `${TABLE_NAME}` (`type`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "UserEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "userId"
            ],
            "referencedColumns": [
              "userId"
            ]
          }
        ]
      },
      {
        "tableName": "TelemetryEventEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `userId` TEXT, `group` TEXT NOT NULL, `name` TEXT NOT NULL, `values` TEXT NOT NULL, `dimensions` TEXT NOT NULL, `timestamp` INTEGER NOT NULL, FOREIGN KEY(`userId`) REFERENCES `UserEntity`(`userId`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "id",
            "columnName": "id",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "userId",
            "columnName": "userId",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "group",
            "columnName": "group",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "name",
            "columnName": "name",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "values",
            "columnName": "values",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "dimensions",
            "columnName": "dimensions",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "timestamp",
            "columnName": "timestamp",
            "affinity": "INTEGER",
            "notNull": true
          }
        ],
        "primaryKey": {
          "autoGenerate": true,
          "columnNames": [
            "id"
          ]
        },
        "indices": [
          {
            "name": "index_TelemetryEventEntity_userId",
            "unique": false,
            "columnNames": [
              "userId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_TelemetryEventEntity_userId` ON `${TABLE_NAME}` (`userId`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "UserEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "userId"
            ],
            "referencedColumns": [
              "userId"
            ]
          }
        ]
      },
      {
        "tableName": "RecoveryFileEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`userId` TEXT NOT NULL, `createdAtUtcMillis` INTEGER NOT NULL, `keyCount` INTEGER, `recoveryFile` TEXT NOT NULL, `recoverySecretHash` TEXT NOT NULL, PRIMARY KEY(`recoverySecretHash`), FOREIGN KEY(`userId`) REFERENCES `UserEntity`(`userId`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "userId",
            "columnName": "userId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "createdAtUtcMillis",
            "columnName": "createdAtUtcMillis",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "keyCount",
            "columnName": "keyCount",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "recoveryFile",
            "columnName": "recoveryFile",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "recoverySecretHash",
            "columnName": "recoverySecretHash",
            "affinity": "TEXT",
            "notNull": true
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "recoverySecretHash"
          ]
        },
        "indices": [
          {
            "name": "index_RecoveryFileEntity_userId",
            "unique": false,
            "columnNames": [
              "userId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_RecoveryFileEntity_userId` ON `${TABLE_NAME}` (`userId`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "UserEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "userId"
            ],
            "referencedColumns": [
              "userId"
            ]
          }
        ]
      },
      {
        "tableName": "DeviceSecretEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`userId` TEXT NOT NULL, `deviceId` TEXT NOT NULL, `secret` TEXT NOT NULL, `token` TEXT NOT NULL, PRIMARY KEY(`userId`), FOREIGN KEY(`userId`) REFERENCES `AccountEntity`(`userId`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "userId",
            "columnName": "userId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "deviceId",
            "columnName": "deviceId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "secret",
            "columnName": "secret",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "token",
            "columnName": "token",
            "affinity": "TEXT",
            "notNull": true
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "userId"
          ]
        },
        "indices": [
          {
            "name": "index_DeviceSecretEntity_userId",
            "unique": false,
            "columnNames": [
              "userId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_DeviceSecretEntity_userId` ON `${TABLE_NAME}` (`userId`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "AccountEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "userId"
            ],
            "referencedColumns": [
              "userId"
            ]
          }
        ]
      },
      {
        "tableName": "AuthDeviceEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`userId` TEXT NOT NULL, `deviceId` TEXT NOT NULL, `addressId` TEXT, `state` INTEGER NOT NULL, `name` TEXT NOT NULL, `localizedClientName` TEXT NOT NULL, `platform` TEXT, `createdAtUtcSeconds` INTEGER NOT NULL, `activatedAtUtcSeconds` INTEGER, `rejectedAtUtcSeconds` INTEGER, `activationToken` TEXT, `lastActivityAtUtcSeconds` INTEGER NOT NULL, PRIMARY KEY(`userId`, `deviceId`), FOREIGN KEY(`userId`) REFERENCES `AccountEntity`(`userId`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "userId",
            "columnName": "userId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "deviceId",
            "columnName": "deviceId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "addressId",
            "columnName": "addressId",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "state",
            "columnName": "state",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "name",
            "columnName": "name",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "localizedClientName",
            "columnName": "localizedClientName",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "platform",
            "columnName": "platform",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "createdAtUtcSeconds",
            "columnName": "createdAtUtcSeconds",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "activatedAtUtcSeconds",
            "columnName": "activatedAtUtcSeconds",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "rejectedAtUtcSeconds",
            "columnName": "rejectedAtUtcSeconds",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "activationToken",
            "columnName": "activationToken",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "lastActivityAtUtcSeconds",
            "columnName": "lastActivityAtUtcSeconds",
            "affinity": "INTEGER",
            "notNull": true
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "userId",
            "deviceId"
          ]
        },
        "indices": [
          {
            "name": "index_AuthDeviceEntity_userId",
            "unique": false,
            "columnNames": [
              "userId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_AuthDeviceEntity_userId` ON `${TABLE_NAME}` (`userId`)"
          },
          {
            "name": "index_AuthDeviceEntity_addressId",
            "unique": false,
            "columnNames": [
              "addressId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_AuthDeviceEntity_addressId` ON `${TABLE_NAME}` (`addressId`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "AccountEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "userId"
            ],
            "referencedColumns": [
              "userId"
            ]
          }
        ]
      },
      {
        "tableName": "MemberDeviceEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`userId` TEXT NOT NULL, `deviceId` TEXT NOT NULL, `memberId` TEXT NOT NULL, `addressId` TEXT, `state` INTEGER NOT NULL, `name` TEXT NOT NULL, `localizedClientName` TEXT NOT NULL, `platform` TEXT, `createdAtUtcSeconds` INTEGER NOT NULL, `activatedAtUtcSeconds` INTEGER, `rejectedAtUtcSeconds` INTEGER, `activationToken` TEXT, `lastActivityAtUtcSeconds` INTEGER NOT NULL, PRIMARY KEY(`userId`, `deviceId`), FOREIGN KEY(`userId`) REFERENCES `AccountEntity`(`userId`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "userId",
            "columnName": "userId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "deviceId",
            "columnName": "deviceId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "memberId",
            "columnName": "memberId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "addressId",
            "columnName": "addressId",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "state",
            "columnName": "state",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "name",
            "columnName": "name",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "localizedClientName",
            "columnName": "localizedClientName",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "platform",
            "columnName": "platform",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "createdAtUtcSeconds",
            "columnName": "createdAtUtcSeconds",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "activatedAtUtcSeconds",
            "columnName": "activatedAtUtcSeconds",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "rejectedAtUtcSeconds",
            "columnName": "rejectedAtUtcSeconds",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "activationToken",
            "columnName": "activationToken",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "lastActivityAtUtcSeconds",
            "columnName": "lastActivityAtUtcSeconds",
            "affinity": "INTEGER",
            "notNull": true
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "userId",
            "deviceId"
          ]
        },
        "indices": [
          {
            "name": "index_MemberDeviceEntity_userId",
            "unique": false,
            "columnNames": [
              "userId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_MemberDeviceEntity_userId` ON `${TABLE_NAME}` (`userId`)"
          },
          {
            "name": "index_MemberDeviceEntity_memberId",
            "unique": false,
            "columnNames": [
              "memberId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_MemberDeviceEntity_memberId` ON `${TABLE_NAME}` (`memberId`)"
          },
          {
            "name": "index_MemberDeviceEntity_addressId",
            "unique": false,
            "columnNames": [
              "addressId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_MemberDeviceEntity_addressId` ON `${TABLE_NAME}` (`addressId`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "AccountEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "userId"
            ],
            "referencedColumns": [
              "userId"
            ]
          }
        ]
      },
      {
        "tableName": "ItemEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`id` TEXT NOT NULL, `user_id` TEXT NOT NULL, `address_id` TEXT NOT NULL, `share_id` TEXT NOT NULL, `revision` INTEGER NOT NULL, `content_format_version` INTEGER NOT NULL, `key_rotation` INTEGER NOT NULL, `content` TEXT NOT NULL, `key` TEXT, `state` INTEGER NOT NULL, `item_type` INTEGER NOT NULL, `alias_email` TEXT, `create_time` INTEGER NOT NULL, `modify_time` INTEGER NOT NULL, `last_used_time` INTEGER, `has_totp` INTEGER, `is_pinned` INTEGER NOT NULL DEFAULT 0, `pin_time` INTEGER, `has_passkeys` INTEGER, `flags` INTEGER NOT NULL, `share_count` INTEGER NOT NULL DEFAULT 0, `encrypted_title` TEXT NOT NULL, `encrypted_note` TEXT NOT NULL, `encrypted_content` BLOB NOT NULL, `encrypted_key` BLOB, PRIMARY KEY(`id`, `share_id`), FOREIGN KEY(`address_id`) REFERENCES `AddressEntity`(`addressId`) ON UPDATE NO ACTION ON DELETE CASCADE , FOREIGN KEY(`user_id`) REFERENCES `UserEntity`(`userId`) ON UPDATE NO ACTION ON DELETE CASCADE , FOREIGN KEY(`share_id`) REFERENCES `ShareEntity`(`id`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "id",
            "columnName": "id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "userId",
            "columnName": "user_id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "addressId",
            "columnName": "address_id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "shareId",
            "columnName": "share_id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "revision",
            "columnName": "revision",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "contentFormatVersion",
            "columnName": "content_format_version",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "keyRotation",
            "columnName": "key_rotation",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "content",
            "columnName": "content",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "key",
            "columnName": "key",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "state",
            "columnName": "state",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "itemType",
            "columnName": "item_type",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "aliasEmail",
            "columnName": "alias_email",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "createTime",
            "columnName": "create_time",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "modifyTime",
            "columnName": "modify_time",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "lastUsedTime",
            "columnName": "last_used_time",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "hasTotp",
            "columnName": "has_totp",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "isPinned",
            "columnName": "is_pinned",
            "affinity": "INTEGER",
            "notNull": true,
            "defaultValue": "0"
          },
          {
            "fieldPath": "pinTime",
            "columnName": "pin_time",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "hasPasskeys",
            "columnName": "has_passkeys",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "flags",
            "columnName": "flags",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "shareCount",
            "columnName": "share_count",
            "affinity": "INTEGER",
            "notNull": true,
            "defaultValue": "0"
          },
          {
            "fieldPath": "encryptedTitle",
            "columnName": "encrypted_title",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "encryptedNote",
            "columnName": "encrypted_note",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "encryptedContent",
            "columnName": "encrypted_content",
            "affinity": "BLOB",
            "notNull": true
          },
          {
            "fieldPath": "encryptedKey",
            "columnName": "encrypted_key",
            "affinity": "BLOB"
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "id",
            "share_id"
          ]
        },
        "indices": [
          {
            "name": "index_ItemEntity_user_id",
            "unique": false,
            "columnNames": [
              "user_id"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_ItemEntity_user_id` ON `${TABLE_NAME}` (`user_id`)"
          },
          {
            "name": "index_ItemEntity_address_id",
            "unique": false,
            "columnNames": [
              "address_id"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_ItemEntity_address_id` ON `${TABLE_NAME}` (`address_id`)"
          },
          {
            "name": "index_ItemEntity_share_id",
            "unique": false,
            "columnNames": [
              "share_id"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_ItemEntity_share_id` ON `${TABLE_NAME}` (`share_id`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "AddressEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "address_id"
            ],
            "referencedColumns": [
              "addressId"
            ]
          },
          {
            "table": "UserEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "user_id"
            ],
            "referencedColumns": [
              "userId"
            ]
          },
          {
            "table": "ShareEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "share_id"
            ],
            "referencedColumns": [
              "id"
            ]
          }
        ]
      },
      {
        "tableName": "ShareEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`id` TEXT NOT NULL, `user_id` TEXT NOT NULL, `address_id` TEXT NOT NULL, `vault_id` TEXT NOT NULL, `share_type` INTEGER NOT NULL, `target_id` TEXT NOT NULL, `permission` INTEGER NOT NULL, `content` TEXT, `content_key_rotation` INTEGER, `content_format_version` INTEGER, `expiration_time` INTEGER, `create_time` INTEGER NOT NULL, `encrypted_content` BLOB, `is_active` INTEGER NOT NULL DEFAULT 1, `share_role_id` TEXT NOT NULL DEFAULT '1', `owner` INTEGER NOT NULL DEFAULT 1, `target_members` INTEGER NOT NULL DEFAULT 1, `shared` INTEGER NOT NULL DEFAULT 0, `target_max_members` INTEGER NOT NULL DEFAULT 10, `pending_invites` INTEGER NOT NULL DEFAULT 0, `new_user_invites_ready` INTEGER NOT NULL DEFAULT 0, `can_autofill` INTEGER NOT NULL DEFAULT 1, PRIMARY KEY(`id`), FOREIGN KEY(`address_id`) REFERENCES `AddressEntity`(`addressId`) ON UPDATE NO ACTION ON DELETE CASCADE , FOREIGN KEY(`user_id`) REFERENCES `UserEntity`(`userId`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "id",
            "columnName": "id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "userId",
            "columnName": "user_id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "addressId",
            "columnName": "address_id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "vaultId",
            "columnName": "vault_id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "targetType",
            "columnName": "share_type",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "targetId",
            "columnName": "target_id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "permission",
            "columnName": "permission",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "content",
            "columnName": "content",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "contentKeyRotation",
            "columnName": "content_key_rotation",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "contentFormatVersion",
            "columnName": "content_format_version",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "expirationTime",
            "columnName": "expiration_time",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "createTime",
            "columnName": "create_time",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "encryptedContent",
            "columnName": "encrypted_content",
            "affinity": "BLOB"
          },
          {
            "fieldPath": "isActive",
            "columnName": "is_active",
            "affinity": "INTEGER",
            "notNull": true,
            "defaultValue": "1"
          },
          {
            "fieldPath": "shareRoleId",
            "columnName": "share_role_id",
            "affinity": "TEXT",
            "notNull": true,
            "defaultValue": "'1'"
          },
          {
            "fieldPath": "owner",
            "columnName": "owner",
            "affinity": "INTEGER",
            "notNull": true,
            "defaultValue": "1"
          },
          {
            "fieldPath": "targetMembers",
            "columnName": "target_members",
            "affinity": "INTEGER",
            "notNull": true,
            "defaultValue": "1"
          },
          {
            "fieldPath": "shared",
            "columnName": "shared",
            "affinity": "INTEGER",
            "notNull": true,
            "defaultValue": "0"
          },
          {
            "fieldPath": "targetMaxMembers",
            "columnName": "target_max_members",
            "affinity": "INTEGER",
            "notNull": true,
            "defaultValue": "10"
          },
          {
            "fieldPath": "pendingInvites",
            "columnName": "pending_invites",
            "affinity": "INTEGER",
            "notNull": true,
            "defaultValue": "0"
          },
          {
            "fieldPath": "newUserInvitesReady",
            "columnName": "new_user_invites_ready",
            "affinity": "INTEGER",
            "notNull": true,
            "defaultValue": "0"
          },
          {
            "fieldPath": "canAutofill",
            "columnName": "can_autofill",
            "affinity": "INTEGER",
            "notNull": true,
            "defaultValue": "1"
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "id"
          ]
        },
        "indices": [
          {
            "name": "index_ShareEntity_user_id",
            "unique": false,
            "columnNames": [
              "user_id"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_ShareEntity_user_id` ON `${TABLE_NAME}` (`user_id`)"
          },
          {
            "name": "index_ShareEntity_address_id",
            "unique": false,
            "columnNames": [
              "address_id"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_ShareEntity_address_id` ON `${TABLE_NAME}` (`address_id`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "AddressEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "address_id"
            ],
            "referencedColumns": [
              "addressId"
            ]
          },
          {
            "table": "UserEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "user_id"
            ],
            "referencedColumns": [
              "userId"
            ]
          }
        ]
      },
      {
        "tableName": "ShareKeyEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`rotation` INTEGER NOT NULL, `user_id` TEXT NOT NULL, `address_id` TEXT NOT NULL, `share_id` TEXT NOT NULL, `key` TEXT NOT NULL, `create_time` INTEGER NOT NULL, `symmetrically_encrypted_key` BLOB NOT NULL, `user_key_id` TEXT NOT NULL, `is_active` INTEGER NOT NULL DEFAULT 1, PRIMARY KEY(`rotation`, `share_id`), FOREIGN KEY(`address_id`) REFERENCES `AddressEntity`(`addressId`) ON UPDATE NO ACTION ON DELETE CASCADE , FOREIGN KEY(`user_id`) REFERENCES `UserEntity`(`userId`) ON UPDATE NO ACTION ON DELETE CASCADE , FOREIGN KEY(`share_id`) REFERENCES `ShareEntity`(`id`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "rotation",
            "columnName": "rotation",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "userId",
            "columnName": "user_id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "addressId",
            "columnName": "address_id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "shareId",
            "columnName": "share_id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "key",
            "columnName": "key",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "createTime",
            "columnName": "create_time",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "symmetricallyEncryptedKey",
            "columnName": "symmetrically_encrypted_key",
            "affinity": "BLOB",
            "notNull": true
          },
          {
            "fieldPath": "userKeyId",
            "columnName": "user_key_id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "isActive",
            "columnName": "is_active",
            "affinity": "INTEGER",
            "notNull": true,
            "defaultValue": "1"
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "rotation",
            "share_id"
          ]
        },
        "indices": [
          {
            "name": "index_ShareKeyEntity_user_id",
            "unique": false,
            "columnNames": [
              "user_id"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_ShareKeyEntity_user_id` ON `${TABLE_NAME}` (`user_id`)"
          },
          {
            "name": "index_ShareKeyEntity_address_id",
            "unique": false,
            "columnNames": [
              "address_id"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_ShareKeyEntity_address_id` ON `${TABLE_NAME}` (`address_id`)"
          },
          {
            "name": "index_ShareKeyEntity_share_id",
            "unique": false,
            "columnNames": [
              "share_id"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_ShareKeyEntity_share_id` ON `${TABLE_NAME}` (`share_id`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "AddressEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "address_id"
            ],
            "referencedColumns": [
              "addressId"
            ]
          },
          {
            "table": "UserEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "user_id"
            ],
            "referencedColumns": [
              "userId"
            ]
          },
          {
            "table": "ShareEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "share_id"
            ],
            "referencedColumns": [
              "id"
            ]
          }
        ]
      },
      {
        "tableName": "PassEventEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`id` TEXT NOT NULL, `user_id` TEXT NOT NULL, `address_id` TEXT NOT NULL, `share_id` TEXT NOT NULL, `retrieved_at` INTEGER NOT NULL, PRIMARY KEY(`user_id`, `address_id`, `share_id`), FOREIGN KEY(`address_id`) REFERENCES `AddressEntity`(`addressId`) ON UPDATE NO ACTION ON DELETE CASCADE , FOREIGN KEY(`user_id`) REFERENCES `UserEntity`(`userId`) ON UPDATE NO ACTION ON DELETE CASCADE , FOREIGN KEY(`share_id`) REFERENCES `ShareEntity`(`id`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "eventId",
            "columnName": "id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "userId",
            "columnName": "user_id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "addressId",
            "columnName": "address_id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "shareId",
            "columnName": "share_id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "retrievedAt",
            "columnName": "retrieved_at",
            "affinity": "INTEGER",
            "notNull": true
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "user_id",
            "address_id",
            "share_id"
          ]
        },
        "indices": [
          {
            "name": "index_PassEventEntity_address_id",
            "unique": false,
            "columnNames": [
              "address_id"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_PassEventEntity_address_id` ON `${TABLE_NAME}` (`address_id`)"
          },
          {
            "name": "index_PassEventEntity_share_id",
            "unique": false,
            "columnNames": [
              "share_id"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_PassEventEntity_share_id` ON `${TABLE_NAME}` (`share_id`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "AddressEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "address_id"
            ],
            "referencedColumns": [
              "addressId"
            ]
          },
          {
            "table": "UserEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "user_id"
            ],
            "referencedColumns": [
              "userId"
            ]
          },
          {
            "table": "ShareEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "share_id"
            ],
            "referencedColumns": [
              "id"
            ]
          }
        ]
      },
      {
        "tableName": "TelemetryEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `user_id` TEXT NOT NULL, `event` TEXT NOT NULL, `dimensions` TEXT NOT NULL, `create_time` INTEGER NOT NULL, FOREIGN KEY(`user_id`) REFERENCES `UserEntity`(`userId`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "id",
            "columnName": "id",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "userId",
            "columnName": "user_id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "event",
            "columnName": "event",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "dimensions",
            "columnName": "dimensions",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "createTime",
            "columnName": "create_time",
            "affinity": "INTEGER",
            "notNull": true
          }
        ],
        "primaryKey": {
          "autoGenerate": true,
          "columnNames": [
            "id"
          ]
        },
        "indices": [
          {
            "name": "index_TelemetryEntity_user_id",
            "unique": false,
            "columnNames": [
              "user_id"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_TelemetryEntity_user_id` ON `${TABLE_NAME}` (`user_id`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "UserEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "user_id"
            ],
            "referencedColumns": [
              "userId"
            ]
          }
        ]
      },
      {
        "tableName": "SearchEntryEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`item_id` TEXT NOT NULL, `share_id` TEXT NOT NULL, `user_id` TEXT NOT NULL, `create_time` INTEGER NOT NULL, PRIMARY KEY(`share_id`, `item_id`), FOREIGN KEY(`item_id`, `share_id`) REFERENCES `ItemEntity`(`id`, `share_id`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "itemId",
            "columnName": "item_id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "shareId",
            "columnName": "share_id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "userId",
            "columnName": "user_id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "createTime",
            "columnName": "create_time",
            "affinity": "INTEGER",
            "notNull": true
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "share_id",
            "item_id"
          ]
        },
        "indices": [
          {
            "name": "index_SearchEntryEntity_item_id_share_id",
            "unique": true,
            "columnNames": [
              "item_id",
              "share_id"
            ],
            "orders": [],
            "createSql": "CREATE UNIQUE INDEX IF NOT EXISTS `index_SearchEntryEntity_item_id_share_id` ON `${TABLE_NAME}` (`item_id`, `share_id`)"
          },
          {
            "name": "index_SearchEntryEntity_item_id",
            "unique": false,
            "columnNames": [
              "item_id"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_SearchEntryEntity_item_id` ON `${TABLE_NAME}` (`item_id`)"
          },
          {
            "name": "index_SearchEntryEntity_share_id",
            "unique": false,
            "columnNames": [
              "share_id"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_SearchEntryEntity_share_id` ON `${TABLE_NAME}` (`share_id`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "ItemEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "item_id",
              "share_id"
            ],
            "referencedColumns": [
              "id",
              "share_id"
            ]
          }
        ]
      },
      {
        "tableName": "PlanEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`user_id` TEXT NOT NULL, `type` TEXT NOT NULL DEFAULT 'free', `internal_name` TEXT NOT NULL DEFAULT '', `display_name` TEXT NOT NULL DEFAULT '', `vault_limit` INTEGER NOT NULL, `alias_limit` INTEGER NOT NULL, `totp_limit` INTEGER NOT NULL, `updated_at` INTEGER NOT NULL DEFAULT 0, `hide_upgrade` INTEGER NOT NULL DEFAULT 0, `trial_end` INTEGER DEFAULT null, PRIMARY KEY(`user_id`), FOREIGN KEY(`user_id`) REFERENCES `UserEntity`(`userId`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "userId",
            "columnName": "user_id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "type",
            "columnName": "type",
            "affinity": "TEXT",
            "notNull": true,
            "defaultValue": "'free'"
          },
          {
            "fieldPath": "internalName",
            "columnName": "internal_name",
            "affinity": "TEXT",
            "notNull": true,
            "defaultValue": "''"
          },
          {
            "fieldPath": "displayName",
            "columnName": "display_name",
            "affinity": "TEXT",
            "notNull": true,
            "defaultValue": "''"
          },
          {
            "fieldPath": "vaultLimit",
            "columnName": "vault_limit",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "aliasLimit",
            "columnName": "alias_limit",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "totpLimit",
            "columnName": "totp_limit",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "updatedAt",
            "columnName": "updated_at",
            "affinity": "INTEGER",
            "notNull": true,
            "defaultValue": "0"
          },
          {
            "fieldPath": "hideUpgrade",
            "columnName": "hide_upgrade",
            "affinity": "INTEGER",
            "notNull": true,
            "defaultValue": "0"
          },
          {
            "fieldPath": "trialEnd",
            "columnName": "trial_end",
            "affinity": "INTEGER",
            "defaultValue": "null"
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "user_id"
          ]
        },
        "foreignKeys": [
          {
            "table": "UserEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "user_id"
            ],
            "referencedColumns": [
              "userId"
            ]
          }
        ]
      },
      {
        "tableName": "PassDataMigrationEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `name` TEXT NOT NULL, `create_time` INTEGER NOT NULL)",
        "fields": [
          {
            "fieldPath": "id",
            "columnName": "id",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "name",
            "columnName": "name",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "createTime",
            "columnName": "create_time",
            "affinity": "INTEGER",
            "notNull": true
          }
        ],
        "primaryKey": {
          "autoGenerate": true,
          "columnNames": [
            "id"
          ]
        }
      },
      {
        "tableName": "InviteEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`token` TEXT NOT NULL, `user_id` TEXT NOT NULL, `inviter_email` TEXT NOT NULL, `member_count` INTEGER NOT NULL, `item_count` INTEGER NOT NULL, `reminder_count` INTEGER NOT NULL, `share_content` TEXT NOT NULL, `share_content_key_rotation` INTEGER NOT NULL, `share_content_format_version` INTEGER NOT NULL, `create_time` INTEGER NOT NULL, `encrypted_content` BLOB NOT NULL, `invited_email` TEXT NOT NULL DEFAULT '', `invited_address_id` TEXT NOT NULL DEFAULT '', `from_new_user` INTEGER NOT NULL DEFAULT 0, `share_type` INTEGER NOT NULL DEFAULT 1, PRIMARY KEY(`token`), FOREIGN KEY(`user_id`) REFERENCES `UserEntity`(`userId`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "token",
            "columnName": "token",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "userId",
            "columnName": "user_id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "inviterEmail",
            "columnName": "inviter_email",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "memberCount",
            "columnName": "member_count",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "itemCount",
            "columnName": "item_count",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "reminderCount",
            "columnName": "reminder_count",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "shareContent",
            "columnName": "share_content",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "shareContentKeyRotation",
            "columnName": "share_content_key_rotation",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "shareContentFormatVersion",
            "columnName": "share_content_format_version",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "createTime",
            "columnName": "create_time",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "encryptedContent",
            "columnName": "encrypted_content",
            "affinity": "BLOB",
            "notNull": true
          },
          {
            "fieldPath": "invitedEmail",
            "columnName": "invited_email",
            "affinity": "TEXT",
            "notNull": true,
            "defaultValue": "''"
          },
          {
            "fieldPath": "invitedAddressId",
            "columnName": "invited_address_id",
            "affinity": "TEXT",
            "notNull": true,
            "defaultValue": "''"
          },
          {
            "fieldPath": "fromNewUser",
            "columnName": "from_new_user",
            "affinity": "INTEGER",
            "notNull": true,
            "defaultValue": "0"
          },
          {
            "fieldPath": "shareType",
            "columnName": "share_type",
            "affinity": "INTEGER",
            "notNull": true,
            "defaultValue": "1"
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "token"
          ]
        },
        "indices": [
          {
            "name": "index_InviteEntity_user_id",
            "unique": false,
            "columnNames": [
              "user_id"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_InviteEntity_user_id` ON `${TABLE_NAME}` (`user_id`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "UserEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "user_id"
            ],
            "referencedColumns": [
              "userId"
            ]
          }
        ]
      },
      {
        "tableName": "InviteKeyEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`invite_token` TEXT NOT NULL, `key` TEXT NOT NULL, `key_rotation` INTEGER NOT NULL, `create_time` INTEGER NOT NULL, PRIMARY KEY(`invite_token`, `key_rotation`), FOREIGN KEY(`invite_token`) REFERENCES `InviteEntity`(`token`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "inviteToken",
            "columnName": "invite_token",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "key",
            "columnName": "key",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "keyRotation",
            "columnName": "key_rotation",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "createTime",
            "columnName": "create_time",
            "affinity": "INTEGER",
            "notNull": true
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "invite_token",
            "key_rotation"
          ]
        },
        "foreignKeys": [
          {
            "table": "InviteEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "invite_token"
            ],
            "referencedColumns": [
              "token"
            ]
          }
        ]
      },
      {
        "tableName": "UserAccessDataEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`user_id` TEXT NOT NULL, `pending_invites` INTEGER NOT NULL, `waiting_new_user_invites` INTEGER NOT NULL, `min_version_upgrade` TEXT, `monitor_proton_addresses` INTEGER NOT NULL DEFAULT 1, `monitor_alias_addresses` INTEGER NOT NULL DEFAULT 1, `simple_login_sync_enabled` INTEGER NOT NULL DEFAULT 0, `simple_login_sync_default_share_id` TEXT NOT NULL DEFAULT '', `simple_login_sync_pending_alias_count` INTEGER NOT NULL DEFAULT 0, `simple_login_sync_can_manage_alias` INTEGER NOT NULL DEFAULT 0, `storage_allowed` INTEGER NOT NULL DEFAULT 0, `storage_used` INTEGER NOT NULL DEFAULT 0, `storage_quota` INTEGER NOT NULL DEFAULT 0, `storage_max_file_size` INTEGER NOT NULL DEFAULT 0, PRIMARY KEY(`user_id`), FOREIGN KEY(`user_id`) REFERENCES `UserEntity`(`userId`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "userId",
            "columnName": "user_id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "pendingInvites",
            "columnName": "pending_invites",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "waitingNewUserInvites",
            "columnName": "waiting_new_user_invites",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "minVersionUpgrade",
            "columnName": "min_version_upgrade",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "protonMonitorEnabled",
            "columnName": "monitor_proton_addresses",
            "affinity": "INTEGER",
            "notNull": true,
            "defaultValue": "1"
          },
          {
            "fieldPath": "aliasMonitorEnabled",
            "columnName": "monitor_alias_addresses",
            "affinity": "INTEGER",
            "notNull": true,
            "defaultValue": "1"
          },
          {
            "fieldPath": "isSimpleLoginSyncEnabled",
            "columnName": "simple_login_sync_enabled",
            "affinity": "INTEGER",
            "notNull": true,
            "defaultValue": "0"
          },
          {
            "fieldPath": "simpleLoginSyncDefaultShareId",
            "columnName": "simple_login_sync_default_share_id",
            "affinity": "TEXT",
            "notNull": true,
            "defaultValue": "''"
          },
          {
            "fieldPath": "simpleLoginSyncPendingAliasCount",
            "columnName": "simple_login_sync_pending_alias_count",
            "affinity": "INTEGER",
            "notNull": true,
            "defaultValue": "0"
          },
          {
            "fieldPath": "canManageSimpleLoginAliases",
            "columnName": "simple_login_sync_can_manage_alias",
            "affinity": "INTEGER",
            "notNull": true,
            "defaultValue": "0"
          },
          {
            "fieldPath": "storageAllowed",
            "columnName": "storage_allowed",
            "affinity": "INTEGER",
            "notNull": true,
            "defaultValue": "0"
          },
          {
            "fieldPath": "storageUsed",
            "columnName": "storage_used",
            "affinity": "INTEGER",
            "notNull": true,
            "defaultValue": "0"
          },
          {
            "fieldPath": "storageQuota",
            "columnName": "storage_quota",
            "affinity": "INTEGER",
            "notNull": true,
            "defaultValue": "0"
          },
          {
            "fieldPath": "storageMaxFileSize",
            "columnName": "storage_max_file_size",
            "affinity": "INTEGER",
            "notNull": true,
            "defaultValue": "0"
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "user_id"
          ]
        },
        "foreignKeys": [
          {
            "table": "UserEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "user_id"
            ],
            "referencedColumns": [
              "userId"
            ]
          }
        ]
      },
      {
        "tableName": "PassOrganizationSettingsEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`user_id` TEXT NOT NULL, `can_update` INTEGER NOT NULL, `share_mode` INTEGER NOT NULL, `has_organization` INTEGER NOT NULL, `force_lock_seconds` INTEGER NOT NULL DEFAULT 0, `random_password_allowed` INTEGER, `random_password_min_length` INTEGER, `random_password_max_length` INTEGER, `random_password_include_numbers` INTEGER, `random_password_include_symbols` INTEGER, `random_password_include_uppercase` INTEGER, `memorable_password_allowed` INTEGER, `memorable_password_min_words` INTEGER, `memorable_password_max_words` INTEGER, `memorable_password_capitalized` INTEGER, `memorable_password_include_numbers` INTEGER, `vault_create_mode` INTEGER, `item_share_mode` INTEGER, `secure_links_mode` INTEGER, PRIMARY KEY(`user_id`), FOREIGN KEY(`user_id`) REFERENCES `UserEntity`(`userId`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "userId",
            "columnName": "user_id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "canUpdate",
            "columnName": "can_update",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "shareMode",
            "columnName": "share_mode",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "hasOrganization",
            "columnName": "has_organization",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "forceLockSeconds",
            "columnName": "force_lock_seconds",
            "affinity": "INTEGER",
            "notNull": true,
            "defaultValue": "0"
          },
          {
            "fieldPath": "randomPasswordAllowed",
            "columnName": "random_password_allowed",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "randomPasswordMinLength",
            "columnName": "random_password_min_length",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "randomPasswordMaxLength",
            "columnName": "random_password_max_length",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "randomPasswordIncludeNumbers",
            "columnName": "random_password_include_numbers",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "randomPasswordIncludeSymbols",
            "columnName": "random_password_include_symbols",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "randomPasswordIncludeUppercase",
            "columnName": "random_password_include_uppercase",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "memorablePasswordAllowed",
            "columnName": "memorable_password_allowed",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "memorablePasswordMinWords",
            "columnName": "memorable_password_min_words",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "memorablePasswordMaxWords",
            "columnName": "memorable_password_max_words",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "memorablePasswordCapitalize",
            "columnName": "memorable_password_capitalized",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "memorablePasswordIncludeNumbers",
            "columnName": "memorable_password_include_numbers",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "vaultCreateMode",
            "columnName": "vault_create_mode",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "itemShareMode",
            "columnName": "item_share_mode",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "secureLinksMode",
            "columnName": "secure_links_mode",
            "affinity": "INTEGER"
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "user_id"
          ]
        },
        "foreignKeys": [
          {
            "table": "UserEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "user_id"
            ],
            "referencedColumns": [
              "userId"
            ]
          }
        ]
      },
      {
        "tableName": "SecureLinkEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`user_id` TEXT NOT NULL, `link_id` TEXT NOT NULL, `share_id` TEXT NOT NULL, `item_id` TEXT NOT NULL, `expiration` INTEGER NOT NULL, `is_active` INTEGER NOT NULL, `max_views` INTEGER, `views` INTEGER NOT NULL, `url` TEXT NOT NULL, PRIMARY KEY(`link_id`), FOREIGN KEY(`user_id`) REFERENCES `UserEntity`(`userId`) ON UPDATE NO ACTION ON DELETE CASCADE , FOREIGN KEY(`item_id`, `share_id`) REFERENCES `ItemEntity`(`id`, `share_id`) ON UPDATE NO ACTION ON DELETE CASCADE , FOREIGN KEY(`share_id`) REFERENCES `ShareEntity`(`id`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "userId",
            "columnName": "user_id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "linkId",
            "columnName": "link_id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "shareId",
            "columnName": "share_id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "itemId",
            "columnName": "item_id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "expirationInSeconds",
            "columnName": "expiration",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "isActive",
            "columnName": "is_active",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "maxViews",
            "columnName": "max_views",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "views",
            "columnName": "views",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "url",
            "columnName": "url",
            "affinity": "TEXT",
            "notNull": true
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "link_id"
          ]
        },
        "indices": [
          {
            "name": "index_SecureLinkEntity_user_id",
            "unique": false,
            "columnNames": [
              "user_id"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_SecureLinkEntity_user_id` ON `${TABLE_NAME}` (`user_id`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "UserEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "user_id"
            ],
            "referencedColumns": [
              "userId"
            ]
          },
          {
            "table": "ItemEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "item_id",
              "share_id"
            ],
            "referencedColumns": [
              "id",
              "share_id"
            ]
          },
          {
            "table": "ShareEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "share_id"
            ],
            "referencedColumns": [
              "id"
            ]
          }
        ]
      },
      {
        "tableName": "LiveTelemetryEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `user_id` TEXT NOT NULL, `event` TEXT NOT NULL, `dimensions` TEXT NOT NULL, `create_time` INTEGER NOT NULL, FOREIGN KEY(`user_id`) REFERENCES `UserEntity`(`userId`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "id",
            "columnName": "id",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "userId",
            "columnName": "user_id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "event",
            "columnName": "event",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "dimensions",
            "columnName": "dimensions",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "createTime",
            "columnName": "create_time",
            "affinity": "INTEGER",
            "notNull": true
          }
        ],
        "primaryKey": {
          "autoGenerate": true,
          "columnNames": [
            "id"
          ]
        },
        "indices": [
          {
            "name": "index_LiveTelemetryEntity_user_id",
            "unique": false,
            "columnNames": [
              "user_id"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_LiveTelemetryEntity_user_id` ON `${TABLE_NAME}` (`user_id`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "UserEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "user_id"
            ],
            "referencedColumns": [
              "userId"
            ]
          }
        ]
      },
      {
        "tableName": "AssetLinkEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`website` TEXT NOT NULL, `package_name` TEXT NOT NULL, `created_at` INTEGER NOT NULL, `signature` TEXT NOT NULL, PRIMARY KEY(`website`, `package_name`, `signature`))",
        "fields": [
          {
            "fieldPath": "website",
            "columnName": "website",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "packageName",
            "columnName": "package_name",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "createdAt",
            "columnName": "created_at",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "signature",
            "columnName": "signature",
            "affinity": "TEXT",
            "notNull": true
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "website",
            "package_name",
            "signature"
          ]
        },
        "indices": [
          {
            "name": "index_AssetLinkEntity_website_package_name_signature",
            "unique": true,
            "columnNames": [
              "website",
              "package_name",
              "signature"
            ],
            "orders": [],
            "createSql": "CREATE UNIQUE INDEX IF NOT EXISTS `index_AssetLinkEntity_website_package_name_signature` ON `${TABLE_NAME}` (`website`, `package_name`, `signature`)"
          }
        ]
      },
      {
        "tableName": "IgnoredAssetLinkEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`website` TEXT NOT NULL, PRIMARY KEY(`website`))",
        "fields": [
          {
            "fieldPath": "website",
            "columnName": "website",
            "affinity": "TEXT",
            "notNull": true
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "website"
          ]
        },
        "indices": [
          {
            "name": "index_IgnoredAssetLinkEntity_website",
            "unique": false,
            "columnNames": [
              "website"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_IgnoredAssetLinkEntity_website` ON `${TABLE_NAME}` (`website`)"
          }
        ]
      },
      {
        "tableName": "InAppMessageEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`id` TEXT NOT NULL, `key` TEXT NOT NULL, `mode` INTEGER NOT NULL, `priority` INTEGER NOT NULL, `title` TEXT NOT NULL, `message` TEXT, `image_url` TEXT, `cta_text` TEXT, `cta_route` TEXT, `cta_type` TEXT, `state` INTEGER NOT NULL, `range_start` INTEGER NOT NULL, `range_end` INTEGER, `user_id` TEXT NOT NULL, `promo_start_minimized` INTEGER, `promo_close_text` TEXT, `promo_minimized_text` TEXT, `promo_light_bg_url` TEXT, `promo_light_content_url` TEXT, `promo_light_close_text_color` TEXT, `promo_dark_bg_url` TEXT, `promo_dark_content_url` TEXT, `promo_dark_close_text_color` TEXT, PRIMARY KEY(`user_id`, `id`), FOREIGN KEY(`user_id`) REFERENCES `UserEntity`(`userId`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "id",
            "columnName": "id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "key",
            "columnName": "key",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "mode",
            "columnName": "mode",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "priority",
            "columnName": "priority",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "title",
            "columnName": "title",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "message",
            "columnName": "message",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "imageUrl",
            "columnName": "image_url",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "ctaText",
            "columnName": "cta_text",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "ctaRoute",
            "columnName": "cta_route",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "ctaType",
            "columnName": "cta_type",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "state",
            "columnName": "state",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "rangeStart",
            "columnName": "range_start",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "rangeEnd",
            "columnName": "range_end",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "userId",
            "columnName": "user_id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "promoStartMinimized",
            "columnName": "promo_start_minimized",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "promoCloseText",
            "columnName": "promo_close_text",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "promoMinimizedText",
            "columnName": "promo_minimized_text",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "promoLightBackgroundUrl",
            "columnName": "promo_light_bg_url",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "promoLightContentUrl",
            "columnName": "promo_light_content_url",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "promoLightCloseTextColor",
            "columnName": "promo_light_close_text_color",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "promoDarkBackgroundUrl",
            "columnName": "promo_dark_bg_url",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "promoDarkContentUrl",
            "columnName": "promo_dark_content_url",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "promoDarkCloseTextColor",
            "columnName": "promo_dark_close_text_color",
            "affinity": "TEXT"
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "user_id",
            "id"
          ]
        },
        "indices": [
          {
            "name": "index_InAppMessageEntity_user_id",
            "unique": false,
            "columnNames": [
              "user_id"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_InAppMessageEntity_user_id` ON `${TABLE_NAME}` (`user_id`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "UserEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "user_id"
            ],
            "referencedColumns": [
              "userId"
            ]
          }
        ]
      },
      {
        "tableName": "AttachmentEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`id` TEXT NOT NULL, `persistent_id` TEXT NOT NULL DEFAULT '', `user_id` TEXT NOT NULL, `share_id` TEXT NOT NULL, `item_id` TEXT NOT NULL, `metadata` TEXT NOT NULL, `size` INTEGER NOT NULL, `create_time` INTEGER NOT NULL, `modify_time` INTEGER, `key` TEXT NOT NULL, `item_key_rotation` TEXT NOT NULL, `revision_added` INTEGER NOT NULL DEFAULT 1, `revision_removed` INTEGER, `reencrypted_key` BLOB NOT NULL, `reencrypted_metadata` BLOB NOT NULL, `encryptionVersion` INTEGER NOT NULL DEFAULT 1, PRIMARY KEY(`id`, `share_id`, `item_id`), FOREIGN KEY(`user_id`) REFERENCES `UserEntity`(`userId`) ON UPDATE NO ACTION ON DELETE CASCADE , FOREIGN KEY(`share_id`) REFERENCES `ShareEntity`(`id`) ON UPDATE NO ACTION ON DELETE CASCADE , FOREIGN KEY(`item_id`, `share_id`) REFERENCES `ItemEntity`(`id`, `share_id`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "id",
            "columnName": "id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "persistentId",
            "columnName": "persistent_id",
            "affinity": "TEXT",
            "notNull": true,
            "defaultValue": "''"
          },
          {
            "fieldPath": "userId",
            "columnName": "user_id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "shareId",
            "columnName": "share_id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "itemId",
            "columnName": "item_id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "metadata",
            "columnName": "metadata",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "size",
            "columnName": "size",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "createTime",
            "columnName": "create_time",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "modifyTime",
            "columnName": "modify_time",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "key",
            "columnName": "key",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "itemKeyRotation",
            "columnName": "item_key_rotation",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "revisionAdded",
            "columnName": "revision_added",
            "affinity": "INTEGER",
            "notNull": true,
            "defaultValue": "1"
          },
          {
            "fieldPath": "revisionRemoved",
            "columnName": "revision_removed",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "reencryptedKey",
            "columnName": "reencrypted_key",
            "affinity": "BLOB",
            "notNull": true
          },
          {
            "fieldPath": "reencryptedMetadata",
            "columnName": "reencrypted_metadata",
            "affinity": "BLOB",
            "notNull": true
          },
          {
            "fieldPath": "encryptionVersion",
            "columnName": "encryptionVersion",
            "affinity": "INTEGER",
            "notNull": true,
            "defaultValue": "1"
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "id",
            "share_id",
            "item_id"
          ]
        },
        "indices": [
          {
            "name": "index_AttachmentEntity_item_id_share_id",
            "unique": false,
            "columnNames": [
              "item_id",
              "share_id"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_AttachmentEntity_item_id_share_id` ON `${TABLE_NAME}` (`item_id`, `share_id`)"
          },
          {
            "name": "index_AttachmentEntity_user_id",
            "unique": false,
            "columnNames": [
              "user_id"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_AttachmentEntity_user_id` ON `${TABLE_NAME}` (`user_id`)"
          },
          {
            "name": "index_AttachmentEntity_share_id",
            "unique": false,
            "columnNames": [
              "share_id"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_AttachmentEntity_share_id` ON `${TABLE_NAME}` (`share_id`)"
          },
          {
            "name": "index_AttachmentEntity_item_id",
            "unique": false,
            "columnNames": [
              "item_id"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_AttachmentEntity_item_id` ON `${TABLE_NAME}` (`item_id`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "UserEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "user_id"
            ],
            "referencedColumns": [
              "userId"
            ]
          },
          {
            "table": "ShareEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "share_id"
            ],
            "referencedColumns": [
              "id"
            ]
          },
          {
            "table": "ItemEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "item_id",
              "share_id"
            ],
            "referencedColumns": [
              "id",
              "share_id"
            ]
          }
        ]
      },
      {
        "tableName": "ChunkEntity",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`id` TEXT NOT NULL, `attachment_id` TEXT NOT NULL, `item_id` TEXT NOT NULL, `share_id` TEXT NOT NULL, `size` INTEGER NOT NULL, `chunk_index` INTEGER NOT NULL, PRIMARY KEY(`id`, `attachment_id`, `item_id`, `share_id`), FOREIGN KEY(`attachment_id`, `item_id`, `share_id`) REFERENCES `AttachmentEntity`(`id`, `item_id`, `share_id`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "id",
            "columnName": "id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "attachmentId",
            "columnName": "attachment_id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "itemId",
            "columnName": "item_id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "shareId",
            "columnName": "share_id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "size",
            "columnName": "size",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "index",
            "columnName": "chunk_index",
            "affinity": "INTEGER",
            "notNull": true
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "id",
            "attachment_id",
            "item_id",
            "share_id"
          ]
        },
        "indices": [
          {
            "name": "index_ChunkEntity_item_id_share_id",
            "unique": false,
            "columnNames": [
              "item_id",
              "share_id"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_ChunkEntity_item_id_share_id` ON `${TABLE_NAME}` (`item_id`, `share_id`)"
          },
          {
            "name": "index_ChunkEntity_attachment_id_item_id_share_id",
            "unique": false,
            "columnNames": [
              "attachment_id",
              "item_id",
              "share_id"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_ChunkEntity_attachment_id_item_id_share_id` ON `${TABLE_NAME}` (`attachment_id`, `item_id`, `share_id`)"
          },
          {
            "name": "index_ChunkEntity_attachment_id",
            "unique": false,
            "columnNames": [
              "attachment_id"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_ChunkEntity_attachment_id` ON `${TABLE_NAME}` (`attachment_id`)"
          },
          {
            "name": "index_ChunkEntity_item_id",
            "unique": false,
            "columnNames": [
              "item_id"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_ChunkEntity_item_id` ON `${TABLE_NAME}` (`item_id`)"
          },
          {
            "name": "index_ChunkEntity_share_id",
            "unique": false,
            "columnNames": [
              "share_id"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_ChunkEntity_share_id` ON `${TABLE_NAME}` (`share_id`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "AttachmentEntity",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "attachment_id",
              "item_id",
              "share_id"
            ],
            "referencedColumns": [
              "id",
              "item_id",
              "share_id"
            ]
          }
        ]
      }
    ],
    "setupQueries": [
      "CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)",
      "INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, '774812a6dc51eeb46fc2bf1b5210ca43')"
    ]
  }
}